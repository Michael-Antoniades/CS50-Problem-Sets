The purpose of dictionary.c and other necessary MAKEFILES (that will have to be downloaded per the instructions below)
is to take in a literary work for example lala land script, and then check to see how many words are misspelled using a hashtable 
behaving like the given example:

Implement a program that spell-checks a file, a la the below, using a hash table.

$ ./speller texts/lalaland.txt
MISSPELLED WORDS

[...]
AHHHHHHHHHHHHHHHHHHHHHHHHHHHT
[...]
Shangri
[...]
fianc
[...]
Sebastian's
[...]

WORDS MISSPELLED:
WORDS IN DICTIONARY:
WORDS IN TEXT:
TIME IN load:
TIME IN check:
TIME IN size:
TIME IN unload:
TIME IN TOTAL:

The code required I wrote for this assignnment is all within dictionary.c, functions correctly and was checked at 100% by check50
using Harvard's IDE. speller.zip download from 
https://cs50.harvard.edu/x/2021/psets/5/speller/
necessary to produce all necessary files to run dictionary.c


Download and usage instructions from url above:
Log into CS50 IDE and then, in a terminal window, execute each of the below.

Execute cd ~/ (or simply cd with no arguments) to ensure that you’re in your home directory.
Execute mkdir pset5 to make (i.e., create) a directory called pset5.
Execute cd pset5 to change into (i.e., open) that directory.
Execute wget http://cdn.cs50.net/2021/spring/psets/5/speller/speller.zip to download a (compressed) ZIP file with this problem’s distribution.
Execute unzip speller.zip to uncompress that file.
Execute rm speller.zip followed by yes or y to delete that ZIP file.
Execute ls. You should see a directory called speller, which was inside of that ZIP file.
Execute cd speller to change into that directory.
Execute ls. You should see this problem’s distribution:
